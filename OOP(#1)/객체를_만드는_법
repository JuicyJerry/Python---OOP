객체를 만드는 법(Quiz1~4)
Q1.
1. 인스턴스 변수는 __init__ 메소드에서 설정해주는 것이 좋다. (O)
    => 모든 인스턴스 변수를 __init__ 메소드에서 설정해주면 보기 쉬운 코드를 쓸 수 있다.

2. 클래스 변수는 인스턴스를 통해 접근해서 값을 바꾸면 된다. (X)
    => 인스턴스를 통해 클래스 변수의 값을 바꾸려고 하면 클래스 변수의 값이 바뀌는 게 아니라 같은 이름의 새로운 인스턴스
    변수가 만들어집니다. 따라서 클래스 변수의 값을 바꾸고 싶으면 인스턴스가 아닌 클래스로 접근해서 값을 바꿔야 합니다.

3. 모든 인스턴스들이 같은 값을 공유해야하는 속성은 인스턴스 변수에 저장한다. (X)
    => 모든 인스턴스들이 같은 값을 공유해야하는 변수라면 클래스 변수로 정의해야 합니다.

4. 모든 인스턴스 변수의 값이 같으면 둘은 같은 인스턴스이다. (X)
    => 모든 인스턴스 변수의 값이 같아도 인스턴스들은 서로 다른 존재일 수도 있습니다.

5. 클래스 변수는 클래스를 통해서만 접근할 수 있다. (X)
    => 클래스 변수는 클래스나 인스턴스 2가지 방법을 통해서 접근할 수 있습니다.


Q2.
1. 정적 메소드는 인스턴스 변수나 클래스 변수를 사용하지 않는다. (O)

2. 인스턴스 메소드로 작성하는 모든 행동은 클래스 메소드로도 나타낼 수 있다. (X)
    => 인스턴스 메소드와 달리 클래스 메소드는 특정 인스턴스에 접근할 수 없습니다. 따라서 인스턴스 메소드에서
    할 수 있는 것 중 클래스 메소드에서 하지 못하는 것들도 있습니다.

3. __init__ 메소드는 따로 호출하지 않아도 인스턴스를 생성할 때 자동으로 호출된다.

4. __str__ 메소드는 인스턴스의 정보를 이해하기 쉬운 문자열로 나타내고 싶을 때 유용하게 사용된다.

5. 특수 메소드들은 파이썬에서 미리 지정한 특정 상황에 자동으로 호출되는 메소드이다.

Q3.
클래스 User에
    1. 인스턴스 메소드 say_hello(파라미터: self)
    2. 클래스 메소드 number_of_users(파라미터: cls)
    3. 정적 메소드 is_valid_email(파라미터: email_address)

가 있고, 그 인스턴스인 user1이 있을 때, 다음 중 에러를 일으키는 코드를 코드시오.
1. User.say_hello(user1)
2. user1.say_hello()
3. User.number_of_users()
4. user1.number_of_users(User)
5. user1.is_valid_email("...")

클래스 메소드는 어떤 방식으로 호출하든 첫번째 파라미터로 그 클래스가 넘어갑니다. number_of_users는
파라미터가 한 개만 필요한데, 보기 4에서는 자동 전달되는 User 클래스와 직접 전달한 User 클래스까지 총 두 개의
파라미터가 넘어가기 때문에 에러가 발생합니다.

