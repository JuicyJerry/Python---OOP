# what is the Object?
# 현실에 존재하든, 가상에 존재하든 속성과 행동을 떠올릴 수 있다면 모두 객체입니다.

# 객체 지향 프로그래밍이란?
# 프로그램을 여러 개의 독립된 객체들과 그 객체들 간의 상호작용으로 파악하는 프로그래밍 접근법이다.
# 프로그램을 객체들과 객체들 간의 소통으로 바라보는 것!

# ex. codeit.grounds: 게임 캐릭터 객체, 총 객체, 총알 객체
# - 게임 캐릭터 객체: 속성 : id, 현재 사용중인 총, 체력, 목숨 / 행동: 총을 발사한다. 달린다. 체력이 0이 되면 죽는다.
# - 총 객체: 속성: 모델명, 무게, 장전된 총알 개수 / 행동: 총알을 발사한다.
# - 총알 객체: 속성: 공격력 / 총알: 총알을 먖은 캐릭터는 공격력에 따라 체력이 달라진다.

# ex2. instagram object
# properties: name, email address, password, follow list, follower list (속성)
# method self-introducing, Do follow (행동)


# 객체 지향 프로그래밍으로 프로그램을 만들려면
# 1. 프로그램에 어떤 객체들이 필요할지 정한다.
# 2. 객체들의 속성과 행동을 정한다.
# 3. 객체들이 서로 어떻게 소통할지 정한다.

# 객체 지향 프로그래밍 <> 절차 지향 프로그래밍
# 일단 데이터와 함수가 하나로 묶인 객체라는 개념이 있고, 객체가 코드상에서 주체로서 행동하고 있다면
# 객체 지향 프로그래밍이라고 생각하면 되고, 대신 객체라는 개념이 없고, 함수가 코드 내에서 주체로서 동작하고 있다면
# 절차 지향 프로그래밍이라고 생각하세요.

# Essential conceopts of OOP
# Abstraction, Encapsulation, Inheritance, Polymorphism / 추상환, 캡술화, 상속, 다양성
